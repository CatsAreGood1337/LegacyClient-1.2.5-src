package me.dev.legacy.modules.exploit;

import me.dev.legacy.api.event.events.other.PacketEvent;
import me.dev.legacy.impl.command.Command;
import me.dev.legacy.impl.setting.Setting;
import me.dev.legacy.modules.Module;
import net.minecraft.util.math.ChunkPos;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.function.Predicate;
import net.minecraft.network.play.server.SPacketBlockChange;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.ChunkPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.text.TextFormatting;
import net.minecraft.util.text.event.ClickEvent;
import net.minecraftforge.fml.common.network.FMLNetworkEvent;
import org.lwjgl.opengl.Display;


public class DL extends Module {

    public Setting<Integer> x = this.register(new Setting("X", 0, 0, 30000000));
    public Setting<Integer> y = this.register(new Setting("Y", 0, 0, 30000000));
    public Setting<Integer> z = this.register(new Setting("Z", 0, 0, 30000000));
    public Setting<Boolean> latency = this.register(new Setting("latency",false));
    public Setting<Boolean> ignore = this.register(new Setting("IgnoreLoaded",true));
    public Setting<Boolean> loadChunks = this.register(new Setting("loadChunks",false, v -> this.ignore.getValue()));
    public Setting<Boolean> notify = this.register(new Setting("Notifications", false));
    private ArrayList<ChunkPos> loaded_chunks = new ArrayList();
    public static final int MAX_DL_PPT = 15;
    public static DL INSTANCE;
    private long startTime = -1L;

    public DL () {
        super("DL", "dababy", Category.COORDEXPLOIT, true, false, false);
        INSTANCE = this;
    }

    @EventHandler
    private final Listener<PacketEvent.Receive> receiveListener = new Listener<>(event -> {
        if(mc.player==null||mc.world==null)
            return;
        if(event.getPacket() instanceof SPacketBlockChange){
            SPacketBlockChange packetIn = (SPacketBlockChange) event.getPacket();
            ChunkPos chunkPos = new ChunkPos(packetIn.getBlockPosition());
            if(ignore.getValue()) {
                if (!loaded_chunks.contains(chunkPos) && mc.world.isBlockLoaded(packetIn.getBlockPosition(), false))
                    return;
                if(notify.getValue()&&!Display.isActive())
                    Command.sendMessage("DL found something.");
            }
            //if(!loadChunks.getValue() &&mc.player.getDistanceSq(packetIn.getBlockPosition())>500*500)
            //    event.cancel();
            DecimalFormat df = new DecimalFormat("#.#");
            Vec3d pos1 = new Vec3d(mc.player.getPosition().getX(), packetIn.getBlockPosition().getY(), mc.player.getPosition().getZ());
            Command.ChatMessage msg = new Command.ChatMessage("&7[&a" + 'M' + "&7] &r"+TextFormatting.RED +"[DL]: "+TextFormatting.RESET +
                    packetIn.getBlockPosition().toString() + " -> " +packetIn.getBlockState().getBlock().getLocalizedName() + " (" +df.format(pos1.distanceTo(new Vec3d(packetIn.getBlockPosition())))+") "+(mc.player.dimension==-1? "Nether" : ""));
            msg.getStyle().setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND,
                    ".dl "+packetIn.getBlockPosition().getX()+ " "+ packetIn.getBlockPosition().getZ()));
            mc.player.sendMessage(msg);
            //SendMessage(packetIn.getBlockPosition().toString() + " -> " +packetIn.getBlockState().getBlock().getLocalizedName());
            if(latency.getValue() && startTime!=-1){
                Command.sendMessage("Latency = "+ (System.currentTimeMillis()-startTime) +" ms");
                startTime=-1;
            }

            if (loadChunks.getValue() && loadChunks.isVisible()// && EntityUtil.get2DdistanceSq(mc.player.getPosition(), packetIn.getBlockPosition()) > 100 * 100
                    && !loaded_chunks.contains(chunkPos)) {
                mc.world.doPreChunk(chunkPos.x, chunkPos.z, true);
                loaded_chunks.add(chunkPos);
                // mc.world.markBlockRangeForRenderUpdate(chunkPos.x << 4, 0, chunkPos.z << 4, (chunkPos.x << 4) + 15, 256, (chunkPos.z << 4) + 15);
            }
        }
    });

    @Override
    public void onEnable() {
        if(mc.world==null)
            return;
        BlockPos pos = new BlockPos(x.getValue(),y.getValue(),z.getValue());
        startTime=System.currentTimeMillis();
        mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK,pos, EnumFacing.UP));
        //mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK,pos, direction));
    }

    @EventHandler
    private Listener<FMLNetworkEvent.ClientConnectedToServerEvent> connectedToServerEventListener = new Listener<>(event -> {
        unloadChunks();
    });

    @Override
    public void onDisable() {
        startTime=-1;
        unloadChunks();
    }

    private void unloadChunks(){
        if(mc.world!=null) {
            for (ChunkPos chunkPos : loaded_chunks) {
                mc.world.doPreChunk(chunkPos.x, chunkPos.z, false);
            }
        }
        loaded_chunks.clear();
    }
}
